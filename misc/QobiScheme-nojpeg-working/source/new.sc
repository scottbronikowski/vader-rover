;;; matrix and array
;;; make all -vector and -matrix operations generic

;;; note: No signed byte and no long double.
(define-structure c-byte-vector string)
(define-structure c-short-unsigned-vector string)
(define-structure c-short-int-vector string)
(define-structure c-unsigned-vector string)
(define-structure c-int-vector string)
(define-structure c-long-unsigned-vector string)
(define-structure c-long-int-vector string)
(define-structure c-float-vector string)
(define-structure c-double-vector string)

(define (c-vector? object)
 (or (c-byte-vector? object)
     (c-short-unsigned-vector? object)
     (c-short-int-vector? object)
     (c-unsigned-vector? object)
     (c-int-vector? object)
     (c-long-unsigned-vector? object)
     (c-long-int-vector? object)
     (c-float-vector? object)
     (c-double-vector? object)))

(define (create-c-byte-vector n . initial-value)
 (let ((string (make-string n)))
  (when (pair? initial-value)
   (let ((initial-value (first initial-value)))
    (do ((i 0 (+ i 1))) ((>= i n)) (c-byte-set! string i initial-value))))
  (make-c-byte-vector string)))

(define (create-c-short-unsigned-vector n . initial-value)
 (let ((string (make-string (* n c-sizeof-short))))
  (when (pair? initial-value)
   (let ((initial-value (first initial-value)))
    (do ((i 0 (+ i 1))) ((>= i n))
     (c-short-unsigned-set! string (* i c-sizeof-short) initial-value))))
  (make-c-short-unsigned-vector string)))

(define (create-c-short-int-vector n . initial-value)
 (let ((string (make-string (* n c-sizeof-short))))
  (when (pair? initial-value)
   (let ((initial-value (first initial-value)))
    (do ((i 0 (+ i 1))) ((>= i n))
     (c-short-int-set! string (* i c-sizeof-short) initial-value))))
  (make-c-short-int-vector string)))

(define (create-c-unsigned-vector n . initial-value)
 (let ((string (make-string (* n c-sizeof-int))))
  (when (pair? initial-value)
   (let ((initial-value (first initial-value)))
    (do ((i 0 (+ i 1))) ((>= i n))
     (c-unsigned-set! string (* i c-sizeof-int) initial-value))))
  (make-c-unsigned-vector string)))

(define (create-c-int-vector n . initial-value)
 (let ((string (make-string (* n c-sizeof-int))))
  (when (pair? initial-value)
   (let ((initial-value (first initial-value)))
    (do ((i 0 (+ i 1))) ((>= i n))
     (c-int-set! string (* i c-sizeof-int) initial-value))))
  (make-c-int-vector string)))

(define (create-c-long-unsigned-vector n . initial-value)
 (let ((string (make-string (* n c-sizeof-long))))
  (when (pair? initial-value)
   (let ((initial-value (first initial-value)))
    (do ((i 0 (+ i 1))) ((>= i n))
     (c-long-unsigned-set! string (* i c-sizeof-long) initial-value))))
  (make-c-long-unsigned-vector string)))

(define (create-c-long-int-vector n . initial-value)
 (let ((string (make-string (* n c-sizeof-long))))
  (when (pair? initial-value)
   (let ((initial-value (first initial-value)))
    (do ((i 0 (+ i 1))) ((>= i n))
     (c-long-int-set! string (* i c-sizeof-long) initial-value))))
  (make-c-long-int-vector string)))

(define (create-c-float-vector n . initial-value)
 (let ((string (make-string (* n c-sizeof-float))))
  (when (pair? initial-value)
   (let ((initial-value (first initial-value)))
    (do ((i 0 (+ i 1))) ((>= i n))
     (c-float-set! string (* i c-sizeof-float) initial-value))))
  (make-c-float-vector string)))

(define (create-c-double-vector n . initial-value)
 (let ((string (make-string (* n c-sizeof-double))))
  (when (pair? initial-value)
   (let ((initial-value (first initial-value)))
    (do ((i 0 (+ i 1))) ((>= i n))
     (c-double-set! string (* i c-sizeof-double) initial-value))))
  (make-c-double-vector string)))

(define (c-vector-length c-vector)
 (cond ((c-byte-vector? c-vector)
	(let ((string (c-byte-vector-string vector)))
	 (unless (string? string) (panic "Length not specified"))
	 (string-length string)))
       ((c-short-unsigned-vector? c-vector)
	(let ((string (c-short-unsigned-vector-string vector)))
	 (unless (string? string) (panic "Length not specified"))
	 (/ (string-length string) c-sizeof-short)))
       ((c-short-int-vector? c-vector)
	(let ((string (c-short-int-vector-string vector)))
	 (unless (string? string) (panic "Length not specified"))
	 (/ (string-length string) c-sizeof-short)))
       ((c-unsigned-vector? c-vector)
	(let ((string (c-unsigned-vector-string vector)))
	 (unless (string? string) (panic "Length not specified"))
	 (/ (string-length string) c-sizeof-int)))
       ((c-int-vector? c-vector)
	(let ((string (c-int-vector-string vector)))
	 (unless (string? string) (panic "Length not specified"))
	 (/ (string-length string) c-sizeof-int)))
       ((c-long-unsigned-vector? c-vector)
	(let ((string (c-long-unsigned-vector-string vector)))
	 (unless (string? string) (panic "Length not specified"))
	 (/ (string-length string) c-sizeof-long)))
       ((c-long-int-vector? c-vector)
	(let ((string (c-long-int-vector-string vector)))
	 (unless (string? string) (panic "Length not specified"))
	 (/ (string-length string) c-sizeof-long)))
       ((c-float-vector? c-vector)
	(let ((string (c-float-vector-string vector)))
	 (unless (string? string) (panic "Length not specified"))
	 (/ (string-length string) c-sizeof-float)))
       ((c-double-vector? c-vector)
	(let ((string (c-double-vector-string vector)))
	 (unless (string? string) (panic "Length not specified"))
	 (/ (string-length string) c-sizeof-double)))
       (else (panic "Argument to C-VECTOR-LENGTH is not a C-VECTOR"))))

(define (c-vector-ref c-vector index)
 (cond
  ((c-byte-vector? c-vector)
   (c-byte-ref (c-byte-vector-string c-vector) index))
  ((c-short-unsigned-vector? c-vector)
   (c-short-unsigned-ref
    (c-short-unsigned-vector-string c-vector) (* index c-sizeof-short)))
  ((c-short-int-vector? c-vector)
   (c-short-int-ref
    (c-short-int-vector-string c-vector) (* index c-sizeof-short)))
  ((c-unsigned-vector? c-vector)
   (c-unsigned-ref (c-unsigned-vector-string c-vector) (* index c-sizeof-int)))
  ((c-int-vector? c-vector)
   (c-int-ref (c-int-vector-string c-vector) (* index c-sizeof-int)))
  ((c-long-unsigned-vector? c-vector)
   (c-long-unsigned-ref
    (c-long-unsigned-vector-string c-vector) (* index c-sizeof-long)))
  ((c-long-int-vector? c-vector)
   (c-long-int-ref
    (c-long-int-vector-string c-vector) (* index c-sizeof-long)))
  ((c-float-vector? c-vector)
   (c-float-ref (c-float-vector-string c-vector) (* index c-sizeof-float)))
  ((c-double-vector? c-vector)
   (c-double-ref (c-double-vector-string c-vector) (* index c-sizeof-double)))
  (else (panic "First argument to C-VECTOR-REF is not a C-VECTOR"))))

(define (c-vector-set! c-vector index value)
 (cond
  ((c-byte-vector? c-vector)
   (c-byte-set! (c-byte-vector-string vector) index value))
  ((c-short-unsigned-vector? c-vector)
   (c-short-unsigned-set!
    (c-short-unsigned-vector-string vector) (* index c-sizeof-short) value))
  ((c-short-int-vector? c-vector)
   (c-short-int-set!
    (c-short-int-vector-string vector) (* index c-sizeof-short) value))
  ((c-unsigned-vector? c-vector)
   (c-unsigned-set!
    (c-unsigned-vector-string vector) (* index c-sizeof-int) value))
  ((c-int-vector? c-vector)
   (c-int-set! (c-int-vector-string vector) (* index c-sizeof-int) value))
  ((c-long-unsigned-vector? c-vector)
   (c-long-unsigned-set!
    (c-long-unsigned-vector-string vector) (* index c-sizeof-long) value))
  ((c-long-int-vector? c-vector)
   (c-long-int-set!
    (c-long-int-vector-string vector) (* index c-sizeof-long) value))
  ((c-float-vector? c-vector)
   (c-float-set!
    (c-float-vector-string vector) (* index c-sizeof-float) value))
  ((c-double-vector? c-vector)
   (c-double-set!
    (c-double-vector-string vector) (* index c-sizeof-double) value))
  (else (panic "First argument to C-VECTOR-SET! is not a C-VECTOR"))))

(define (list->c-byte-vector values)
 (let ((c-vector (create-c-byte-vector (length values))))
  (let loop ((i 0) (values values))
   (unless (null? values)
    (c-vector-set! c-vector i (first values))
    (loop (+ i 1) (rest values))))
  c-vector))

(define (list->c-short-unsigned-vector values)
 (let ((c-vector (create-c-short-unsigned-vector (length values))))
  (let loop ((i 0) (values values))
   (unless (null? values)
    (c-vector-set! c-vector i (first values))
    (loop (+ i 1) (rest values))))
  c-vector))

(define (list->c-short-int-vector values)
 (let ((c-vector (create-c-short-int-vector (length values))))
  (let loop ((i 0) (values values))
   (unless (null? values)
    (c-vector-set! c-vector i (first values))
    (loop (+ i 1) (rest values))))
  c-vector))

(define (list->c-unsigned-vector values)
 (let ((c-vector (create-c-unsigned-vector (length values))))
  (let loop ((i 0) (values values))
   (unless (null? values)
    (c-vector-set! c-vector i (first values))
    (loop (+ i 1) (rest values))))
  c-vector))

(define (list->c-int-vector values)
 (let ((c-vector (create-c-int-vector (length values))))
  (let loop ((i 0) (values values))
   (unless (null? values)
    (c-vector-set! c-vector i (first values))
    (loop (+ i 1) (rest values))))
  c-vector))

(define (list->c-long-unsigned-vector values)
 (let ((c-vector (create-c-long-unsigned-vector (length values))))
  (let loop ((i 0) (values values))
   (unless (null? values)
    (c-vector-set! c-vector i (first values))
    (loop (+ i 1) (rest values))))
  c-vector))

(define (list->c-long-int-vector values)
 (let ((c-vector (create-c-long-int-vector (length values))))
  (let loop ((i 0) (values values))
   (unless (null? values)
    (c-vector-set! c-vector i (first values))
    (loop (+ i 1) (rest values))))
  c-vector))

(define (list->c-float-vector values)
 (let ((c-vector (create-c-float-vector (length values))))
  (let loop ((i 0) (values values))
   (unless (null? values)
    (c-vector-set! c-vector i (first values))
    (loop (+ i 1) (rest values))))
  c-vector))

(define (list->c-double-vector values)
 (let ((c-vector (create-c-double-vector (length values))))
  (let loop ((i 0) (values values))
   (unless (null? values)
    (c-vector-set! c-vector i (first values))
    (loop (+ i 1) (rest values))))
  c-vector))

(define (c-vector->list c-vector)
 (let ((n (c-vector-length c-vector))
       (list '()))
  (do ((i (- n 1) (- i 1))) ((< i 0))
   (set! list (cons (c-vector-ref c-vector i) list)))
  list))

(define (vector->c-byte-vector vector)
 (let* ((n (vector-length vector))
	(c-vector (create-c-byte-vector n)))
  (do ((i 0 (+ i 1))) ((>= i n))
   (c-vector-set! c-vector i (vector-ref vector i)))
  c-vector))

(define (vector->c-short-unsigned-vector vector)
 (let* ((n (vector-length vector))
	(c-vector (create-c-short-unsigned-vector n)))
  (do ((i 0 (+ i 1))) ((>= i n))
   (c-vector-set! c-vector i (vector-ref vector i)))
  c-vector))

(define (vector->c-short-int-vector vector)
 (let* ((n (vector-length vector))
	(c-vector (create-c-short-int-vector n)))
  (do ((i 0 (+ i 1))) ((>= i n))
   (c-vector-set! c-vector i (vector-ref vector i)))
  c-vector))

(define (vector->c-unsigned-vector vector)
 (let* ((n (vector-length vector))
	(c-vector (create-c-unsigned-vector n)))
  (do ((i 0 (+ i 1))) ((>= i n))
   (c-vector-set! c-vector i (vector-ref vector i)))
  c-vector))

(define (vector->c-int-vector vector)
 (let* ((n (vector-length vector))
	(c-vector (create-c-int-vector n)))
  (do ((i 0 (+ i 1))) ((>= i n))
   (c-vector-set! c-vector i (vector-ref vector i)))
  c-vector))

(define (vector->c-long-unsigned-vector vector)
 (let* ((n (vector-length vector))
	(c-vector (create-c-long-unsigned-vector n)))
  (do ((i 0 (+ i 1))) ((>= i n))
   (c-vector-set! c-vector i (vector-ref vector i)))
  c-vector))

(define (vector->c-long-int-vector vector)
 (let* ((n (vector-length vector))
	(c-vector (create-c-long-int-vector n)))
  (do ((i 0 (+ i 1))) ((>= i n))
   (c-vector-set! c-vector i (vector-ref vector i)))
  c-vector))

(define (vector->c-float-vector vector)
 (let* ((n (vector-length vector))
	(c-vector (create-c-float-vector n)))
  (do ((i 0 (+ i 1))) ((>= i n))
   (c-vector-set! c-vector i (vector-ref vector i)))
  c-vector))

(define (vector->c-double-vector vector)
 (let* ((n (vector-length vector))
	(c-vector (create-c-double-vector n)))
  (do ((i 0 (+ i 1))) ((>= i n))
   (c-vector-set! c-vector i (vector-ref vector i)))
  c-vector))

(define (c-vector->vector c-vector)
 (let* ((n (c-vector-length c-vector))
	(vector (make-vector n)))
  (do ((i 0 (+ i 1))) ((>= i n))
   (vector-set! vector i (c-vector-ref c-vector i)))
  vector))
